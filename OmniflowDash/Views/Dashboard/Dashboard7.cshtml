@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dashboard6</title>
    <meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1,maximum-scale=1" />
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.2/jquery.mobile-1.4.2.min.css" />
    <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
    <script src="http://code.jquery.com/mobile/1.4.2/jquery.mobile-1.4.2.min.js"></script>


    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.6/Chart.bundle.min.js"></script>

    @* Date library *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>

    @*
        <link rel="stylesheet" href="~/Content/bootstrap.theme.slate.min.css" />
    *@
    @*
        <style>
            changes JQuery background color
            .ui-page { background:#2b2e31; }

        </style>
    *@
    <style type="text/css">
        #article1 {
            background: url('../../SiteTemplates/projection/img/banner.jpg');
        }
    </style>

@* MQTT *@
 <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
    <script>

        var BROKER_URL = "ws://test.mosquitto.org:8080";
        var TOPIC_INSTDATA = "clealp/sie/of/instdata";
        var TOPIC_CONFDATA = "clealp/sie/of/confdata";
        var TOPIC_MEASURES = "clealp/sie/of/measures";
        var TOPIC_PUT = "clealp/sie/of/put";
        var TOPIC = "clealp/sie/of";

        //var client = mqtt.connect('ws://52.39.125.106:1884');
        //var client = mqtt.connect('ws://test.mosquitto.org:8080');
        var client = mqtt.connect(BROKER_URL);

        client.on('connect', function () {
            //client.subscribe('owntracks/claudioalpereira/mymi');
            client.subscribe(TOPIC_INSTDATA);
            client.subscribe(TOPIC_CONFDATA);
            client.subscribe(TOPIC_MEASURES);
            //client.publish('clealp/sie/of', 'Hello mqtt');
        })

        client.on('message', function (topic, message) {
            // message is Buffer
            console.log(topic+"\n"+message.toString());
            
            if (topic == TOPIC_INSTDATA) {
                instdata = $.parseJSON(message);
                console.log("inst data was updated");
                updateinstelems();
            }
            else if (topic == TOPIC_CONFDATA) {
                confdata = $.parseJSON(message);
                console.log("conf data was updated");
                updateconfelems();
            }
            else if (topic == TOPIC_MEASURES) {
                measures = $.parseJSON(message);
                console.log("measures was updated");
                //updatemeasures();
            }

            //client.end();
        })
    </script>
</head>

<body>
    <!-- Splash Screen  -->
    <div data-role="page" id="article1">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <h1>OMNIconnect</h1>
        </div>
        <div data-role="content">


        </div>
    </div>

    <!-- InstData -->
    <div data-role="page" id="article2">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>InstData</h1>
        </div>
        <div data-role="content">


            <div class="row">
                <div class="col-xs-6">
                    <canvas id="inst-Vbat"></canvas>
                </div>
                <div class="col-xs-6">
                    <canvas id="inst-Temp"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6">
                    <canvas id="inst-LuxLed"></canvas>
                </div>
                <div class="col-xs-6">
                    <canvas id="inst-ILed"></canvas>
                </div>
            </div>




            <div><strong>IMEI: </strong><span id="inst_imei"></span></div>
            <div><strong>Version: </strong><span id="inst_version"></span></div>
            <div><strong>Revision: </strong><span id="inst_revision"></span></div>
            <div><strong>DeviceType: </strong><span id="inst_device"></span></div>
            <div><strong>SerialNumber: </strong><span id="inst_serial"></span></div>

            <div><strong>Last Update: </strong><span id="instdata_lastupdate"></span></div>

        </div>
    </div>

    <!-- ConfData  -->
    <div data-role="page" id="article3">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>ConfData</h1>
        </div>
        <div data-role="content">
            <canvas id="buyers" width="600" height="400"></canvas>
            <canvas id="cf-chartV" width="600" height="400"></canvas>
            <canvas id="cf-chartP" width="600" height="400"></canvas>
            <div><strong>Last Update: </strong><span id="confdata_lastupdate"></span></div>

        </div>
    </div>

    <!-- ConfData Edit -->
    <div data-role="page" id="article4">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>ConfData Edit</h1>
        </div>
        <div data-role="content"  class="prevent_swipe">
            <!-- T -->
            <label for="conf_T3">Fade in PPir mode (ms):</label>
            <input type="range" name="conf_T3" id="conf_T3" value="" min="10" max="2000" step="1" data-highlight="true">

            <label for="conf_T1">PPir LEDs mode time (s):</label>
            <input type="range" name="conf_T1" id="conf_T1" value="" min="15" max="120" step="1" data-highlight="true">

            <label for="conf_T2">Fade out LEDs (s):</label>
            <input type="range" name="conf_T2" id="conf_T2" value="" min="30" max="60" step="1" data-highlight="true">
 
            <!-- V -->
            <label for="conf_V3">Min Voltage (OFF/StandBy):</label>
            <input type="range" name="conf_V3" id="conf_V3" value="" min="9" max="" step="0.1" data-highlight="true">

            <label for="conf_V2">(StandBy/PPir):</label>
            <input type="range" name="conf_V2" id="conf_V2" value="" min="" max="" step="0.1" data-highlight="true">

            <label for="conf_V1">(PPir/Always ON):</label>
            <input type="range" name="conf_V1" id="conf_V1" value="" min="" max="16.5" step="0.1" data-highlight="true">

            <!-- P -->
            <label for="conf_P2">StandBy Mode:</label>
            <input type="range" name="conf_P2" id="conf_P2" value="" min="9" max="" step="0.1" data-highlight="true">

            <label for="conf_P1">PPir (without movement):</label>
            <input type="range" name="conf_P1" id="conf_P1" value="" min="9" max="" step="0.1" data-highlight="true">

            <label for="conf_PPir">PPir (with movement):</label>
            <input type="range" name="conf_PPir" id="conf_PPir" value="" min="9" max="" step="0.1" data-highlight="true">

            <label for="conf_POn">Always ON Mode:</label>
            <input type="range" name="conf_POn" id="conf_POn" value="" min="9" max="" step="0.1" data-highlight="true">

        </div>
    </div>

    <!-- Measures -->
    <div data-role="page" id="article5">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>Measures</h1>
        </div>
        <div data-role="content">
        </div>
    </div>

    <!-- Location -->
    <div data-role="page" id="article6">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>Location</h1>
        </div>
        <div data-role="content">
        </div>
    </div>

    <!-- Stream -->
    <div data-role="page" id="article7">
        <div data-role="header" data-theme="b" data-position="fixed" data-id="footer">
            <a href="#article1" data-icon="home" data-iconpos="notext">Home</a>
            <h1>Camera Stream</h1>
        </div>
        <div data-role="content">
        </div>
    </div>

    @*--------------------------------------------------------------
            Swipe script
        ------------------------------------------------------------*@
    <script>

        $(document).on('swipeleft', '.ui-page', function (event) {
            if (event.handled !== true) // This will prevent event triggering more then once
            {
                var nextpage = $.mobile.activePage.next('[data-role="page"]');
                // swipe using id of next page if exists
                if (nextpage.length > 0) {
                    $.mobile.changePage(nextpage, { transition: "slide", reverse: false }, true, true);
                }
                event.handled = true;
            }
            return false;
        });

        $(document).on('swipeleft swiperight', '.prevent_swipe', function (event) {
            event.stopPropagation();
            event.preventDefault();
        });

        @*http://stackoverflow.com/questions/15723362/prevent-jquery-mobile-swipe-event-over-specific-element*@
        $(document).on('swiperight', '.ui-page', function (event) {
            if (event.handled !== true) // This will prevent event triggering more then once
            {
                var prevpage = $(this).prev('[data-role="page"]');
                if (prevpage.length > 0) {
                    $.mobile.changePage(prevpage, { transition: "slide", reverse: true }, true, true);
                }
                event.handled = true;
            }
            return false;
        });
    </script>

    @* --------------------------------------------------------------
            OF script
        ----------------------------------------------------------------*@
    <script>

        ///////////////////////////////////////
        // initial dummy data

        var state, measures, instdata, confdata;
 
        ///////////////////////////////////////
        // update UI elems

        function updateChartConfT() {

            var x1 = confdata.T3;
            var x2 = confdata.T3 + confdata.T1;
            var x3 = confdata.T3 + confdata.T1 + confdata.T2;

            var d = new Array(x3 + 1).fill(undefined);
            d[0] = 0;
            d[x1] = 1;
            d[x2] = 1;
            d[x3] = 0;

            var l = new Array(x3 + 1).fill('');
            l[x1] = 'T3';
            l[x2] = 'T1';
            l[x3] = 'T2';

            //console.log(l);

            var dd = new Array(9).fill(undefined);
            dd.splice(0, 1, 2);
            dd.splice(3, 1, 7);
            dd.splice(5, 1, 7);

            //console.log(dd);

            new Chart(document.getElementById('buyers'), {
                type: "line",
                data: {
                    labels: ["", "T3", "T1", "T2"],
                    datasets: [
                        {
                            label: "Timing LEDs",
                            data: [0, confdata.T3, confdata.T1, confdata.T2],
                            //data: dd,
                            lineTension: 0,
                            spanGaps: true
                        }
                    ]
                }
            });
        }

        function updateChartConfV() {
              new Chart(document.getElementById('cf-chartV'), {
                  type: "bar",
                  data: {
                      labels: ["OFF (<" + confdata.V3 / 1000 + "V)", "Stand By (<" + confdata.V2 / 1000 + "V)", "PPir (<" + confdata.V1 / 1000 + "V)", "always ON (>" + confdata.V1 / 1000 + "V)"],
                      datasets: [
                          {
                              label: "State Thresholds",
                              data: [0, confdata.V3 / 1000.0, confdata.V2 / 1000.0, confdata.V1 / 1000.0]
                          }
                      ]
                  },
                  options: {
                      scales: {
                          xAxes: [{
                              categoryPercentage: 1.0,
                              barPercentage: 1.0
                          }]
                      }
                  }

              });
        }

        function updateChartConfP() {
            new Chart(document.getElementById('cf-chartP'), {
                type: "bar",
                data: {
                    labels: ["OFF (0%)", "Stand By(" + confdata.P2 + "%)", "PPir no mov.(" + confdata.P1 + "%)", "PPir mov.(" + confdata.PPir + "%)", "always ON(" + confdata.POn + "%)"],
                    datasets: [
                        {
                            label: "LEDs Intensity",
                            //                    data: [0, confdata.P2, confdata.P1, confdata.PPir, confdata.POn]
                            data: [0, confdata.P2, confdata.P1, confdata.PPir, confdata.POn]
                        }
                    ]
                },
                options: {
                    scales: {
                        xAxes: [{
                            categoryPercentage: 1.0,
                            barPercentage: 1.0
                        }]
                    }
                }

            });
        }

        function create_doughnut(v, canvas, label) {

            var pieData = [
            {
                value: v,
                color: "#3F9F3F"
            },
            {
                value: 100 - v
            }
            ];

            var data = {
                labels: [
                    label
                    
                ],
                datasets: [
                    {
                        data: [v, 100 - v],
                        backgroundColor: [
                            "#3F9F3F",
                            "#222"
                        ]
                    }]
            };

            var ctx = document.getElementById(canvas);

            var myDoughnutChart = new Chart(ctx, {
                type: 'doughnut',
                data: data,
                options: {
                    elements: {
                        arc: {
                            borderWidth: 0
                        }
                    },
                    cutoutPercentage: 70,
                    border: 0,
                    title: {
                        display: true,
                        text: v
                    },
                    legend: {
                        display: false
                    }
                }
            });
        }

        function updateconfelems() {
            updateChartConfT();
            updateChartConfP();
            updateChartConfV();
            $("#confdata_lastupdate").text(moment().format('DD-MM-YYYY hh:mm:ss'));

            // T
            $("#conf_T1").val(confdata.T1);
            $("#conf_T2").val(confdata.T2);
            $("#conf_T3").val(confdata.T3);

            // V
            var tt1 = (confdata.V1/1000).toFixed(2);
            var tt2 = (confdata.V2/1000).toFixed(2);
            var tt3 = (confdata.V3/1000).toFixed(2);
            
            $("#conf_V1").val(tt1);
            $("#conf_V1").attr("min", tt2);

            $("#conf_V2").val(tt2);
            $("#conf_V2").attr("min", tt3);
            $("#conf_V2").attr("max", tt1);

            $("#conf_V3").val(tt3);
            $("#conf_V3").attr("max", tt2);

            // P
            $("#conf_P1").val(confdata.P1);
            $("#conf_P2").val(confdata.P2);
            $("#conf_POn").val(confdata.POn);
            $("#conf_PPir").val(confdata.PPir);
        }

        function updateinstelems() {

            create_doughnut((instdata.VBat / 1000).toFixed(2), "inst-Vbat", "VBat");
            create_doughnut((instdata.TElec/10).toFixed(2), "inst-Temp", "Temp");
            create_doughnut(instdata.IntensityLed, "inst-LuxLed", "% LED");
            create_doughnut((instdata.CurrentLed / 1000).toFixed(2), "inst-ILed", "Current LED");

            $("#inst_imei").text(instdata.imei);
            $("#inst_version").text(instdata.Version);
            $("#inst_revision").text(instdata.Revision);
            $("#inst_device").text(instdata.DeviceType);
            $("#inst_serial").text(instdata.SerialNumber);
            $("#instdata_lastupdate").text(instdata.UpdateInstDate+" "+instdata.UpdateInstTime);

        }

        function pubValues() {
            var newT1 = $("#conf_T1").val();
            var newT2 = $("#conf_T2").val();
            var newT3 = $("#conf_T3").val();

            if (newT1 != confdata.T1) {
                console.log("posted new T1");
                client.publish(TOPIC_PUT, "{T1:" + newT1 + "}");
            }
            if (newT2 != confdata.T2) {
                console.log("posted new T2");
                client.publish(TOPIC_PUT, "{T2:" + newT2 + "}");
            }
            if (newT3 != confdata.T3) {
                console.log("posted new T3");
                client.publish(TOPIC_PUT, "{T3:" + newT3 + "}");
            }


        }

        ///////////////////////////////////////
        // aux functions

        function formatDate(d) {
            return d.getFullYear() + '-' + d.getMonth() + 1 + '-' + d.getDate();
        }

        @* http://stackoverflow.com/questions/17445231/js-how-to-find-the-greatest-common-divisor *@
        @* maximo divisor comum entre dois valores *@
        var gcd2 = function (a, b) {
            return (!b) ? a : gcd(b, a % b);
        };

        @* http://www.w3resource.com/javascript-exercises/javascript-math-exercise-9.php *@
        @* maximo divisor comum entre varios valores *@
        function gcd() {

            var a, b;

            a = arguments[0];
            for (var i = 1; i < arguments.length; i++) {
                b = arguments[i];
                a = gcd2(a, b);
            }
            return a;
        }


        ///////////////////////////////////////
        // init

        // populate UI elems with dummy data
        //updateconfelems();



        // fetch data from server & update UI elems
        //getconfdata();
        //getinstdata();


    </script>

</body>

</html>


